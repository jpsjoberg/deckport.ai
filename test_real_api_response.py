#!/usr/bin/env python3
"""
Test Real API Response Structure
Tests the actual JSON structure returned by analytics endpoints
"""

import sys
import json
import requests
from datetime import datetime

# Add project root to path
sys.path.insert(0, '/home/jp/deckport.ai')

def test_api_response_structure():
    """Test actual API responses to verify JSON structure"""
    base_url = "http://127.0.0.1:8002"
    
    print("üß™ TESTING REAL API RESPONSE STRUCTURE")
    print("=" * 60)
    
    # Create a mock admin token for testing (this would normally be generated by auth)
    mock_token = "Bearer mock_admin_token_for_testing"
    headers = {"Authorization": mock_token}
    
    endpoints_to_test = [
        ("/v1/admin/analytics/dashboard-summary", "Dashboard Summary"),
        ("/v1/admin/analytics/revenue?days=7", "Revenue Analytics"),
    ]
    
    for endpoint, name in endpoints_to_test:
        print(f"\nüìä Testing {name}: {endpoint}")
        try:
            response = requests.get(f"{base_url}{endpoint}", headers=headers, timeout=5)
            
            print(f"   Status Code: {response.status_code}")
            
            try:
                data = response.json()
                print(f"   Response Type: {type(data)}")
                
                if response.status_code == 200:
                    print("   ‚úÖ Success Response Structure:")
                    # Check key fields
                    if endpoint.endswith('dashboard-summary'):
                        expected_fields = ['revenue', 'players', 'cards', 'devices', 'online_players']
                        for field in expected_fields:
                            if field in data:
                                print(f"      ‚úÖ {field}: {type(data[field])}")
                                if field == 'revenue' and isinstance(data[field], dict):
                                    revenue_fields = ['daily', 'weekly', 'monthly', 'breakdown']
                                    for rf in revenue_fields:
                                        if rf in data[field]:
                                            print(f"         ‚úÖ revenue.{rf}: {type(data[field][rf])}")
                                        else:
                                            print(f"         ‚ùå Missing revenue.{rf}")
                                    
                                    # Check subscription revenue in breakdown
                                    if 'breakdown' in data[field] and isinstance(data[field]['breakdown'], dict):
                                        if 'subscription_daily' in data[field]['breakdown']:
                                            print(f"         ‚úÖ revenue.breakdown.subscription_daily: {data[field]['breakdown']['subscription_daily']}")
                                        else:
                                            print(f"         ‚ùå Missing subscription_daily in breakdown")
                            else:
                                print(f"      ‚ùå Missing {field}")
                    
                    elif 'revenue' in endpoint:
                        expected_fields = ['total_revenue', 'daily_data', 'breakdown']
                        for field in expected_fields:
                            if field in data:
                                print(f"      ‚úÖ {field}: {type(data[field])}")
                                if field == 'daily_data' and isinstance(data[field], list) and len(data[field]) > 0:
                                    sample_day = data[field][0]
                                    day_fields = ['date', 'revenue', 'total_revenue', 'subscription_revenue']
                                    for df in day_fields:
                                        if df in sample_day:
                                            print(f"         ‚úÖ daily_data[0].{df}: {sample_day[df]}")
                                        else:
                                            print(f"         ‚ùå Missing daily_data[0].{df}")
                                elif field == 'breakdown' and isinstance(data[field], dict):
                                    breakdown_fields = ['shop_revenue', 'trading_revenue', 'subscription_revenue']
                                    for bf in breakdown_fields:
                                        if bf in data[field]:
                                            print(f"         ‚úÖ breakdown.{bf}: {data[field][bf]}")
                                        else:
                                            print(f"         ‚ùå Missing breakdown.{bf}")
                            else:
                                print(f"      ‚ùå Missing {field}")
                
                elif response.status_code == 401:
                    print("   ‚ö†Ô∏è  Authentication required (expected)")
                    if 'error' in data:
                        print(f"      Error: {data['error']}")
                else:
                    print(f"   ‚ùå Unexpected status code")
                    print(f"      Response: {json.dumps(data, indent=2)[:300]}...")
                    
            except json.JSONDecodeError:
                print(f"   ‚ùå Invalid JSON response")
                print(f"      Raw: {response.text[:200]}...")
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Connection error: {e}")
    
    print("\n" + "=" * 60)
    print("üìã FRONTEND COMPATIBILITY SUMMARY")
    print("=" * 60)
    
    compatibility_checks = [
        ("Revenue Analytics", "daily_data[].revenue field", "‚úÖ Added for frontend compatibility"),
        ("Revenue Analytics", "subscription_revenue in breakdown", "‚úÖ Added subscription tracking"),
        ("Dashboard Summary", "devices array", "‚úÖ Added devices list"),
        ("Dashboard Summary", "online_players field", "‚úÖ Added online_players field"),
        ("Dashboard Summary", "subscription revenue", "‚úÖ Added to revenue breakdown")
    ]
    
    for endpoint, check, status in compatibility_checks:
        print(f"{status} {endpoint}: {check}")

if __name__ == "__main__":
    test_api_response_structure()
